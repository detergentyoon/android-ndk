# 네이티브 라이브러리를 구축하는 데 필요한 CMake의 최소 버전을 설정합니다.
cmake_minimum_required(VERSION 3.22.1)

project("ndk_sample")

# 라이브러리를 생성하고 이름을 지정하며 STATIC 또는
# SHARED로 설정하고 소스 코드에 대한 상대 경로를 제공합니다.
# 여러 라이브러리를 정의할 수 있고 CMake가 이 라이브러리를 구축합니다.
# Gradle은 APK와 함께 공유 라이브러리를 자동으로 패키지화합니다.

add_library(
        # 라이브러리의 이름을 설정합니다.
        native-lib

        # 라이브러리를 공유 라이브러리로 설정합니다.
        #       STATIC은 정적 라이브러리를 나타내지만, 안드로이드는 공유 라이브러리를 사용합니다.
        SHARED

        # 원본 파일에 대한 상대 경로를 제공합니다.
        #       native-lib 라이브러리를 구성하는 하나 이상의 소스 파일을 가르킵니다.
        #       아래의 소스 파일은 CMakeLists.txt 파일이 존재하는 위치를 기준으로 상대적인 위치로 표시됩니다.
        native-lib.cpp
        dlfcn.c
)

# 지정된 미리 빌드된 라이브러리를 검색하고 경로를 변수로 저장합니다.
# CMake는 기본적으로 시스템 라이브러리를 검색 경로에 포함시키므로
# 추가하려는 공용 NDK 라이브러리의 이름만 지정하면 됩니다.
# CMake는 빌드를 완료하기 전에 라이브러리가 존재하는지 확인합니다.

find_library(
        # 경로 변수의 이름을 설정합니다.
        #       안드로이드에서 제공하는 라이브러리는 아래와 같이 log-lib 변수로 표기합니다.
        log-lib

        # CMake에서 찾을(프로젝트에서 사용하고자 하는) NDK 라이브러리의 이름을 지정합니다.
        log)

# CMake가 대상 라이브러리에 링크해야 하는 라이브러리를 지정합니다.
# 이 빌드 스크립트에서 정의한 라이브러리, 미리 구축된 타사 라이브러리 또는
# 시스템 라이브러리와 같은 여러 라이브러리를 링크할 수 있습니다.

target_link_libraries(
        # 최종적으로 만들어질 타겟 라이브러리를 지정합니다.
        native-lib

        # 타겟이 될 라이브러리를 NDK에 포함된 로그 라이브러리에 연결합니다.
        #       만약 앞에서 find_library 명령어를 사용하지 않았다면 log라고 라이브러리명을 그냥 표기합니다.
        ${log-lib})